import time

from fastapi import FastAPI, Request, status, File, UploadFile
from piper.envs import CurrentEnv
from loguru import logger
#logger = logging.getLogger(__name__)

#logger.add("file.log", level="INFO", backtrace=True, diagnose=True, rotation='5 MB')

{% for script_name in scripts.keys() %}
from {{ script_name }} import *
{% endfor %}

app = FastAPI(debug=True)
app.logger = logger
logger.info(f'main here {time.time()}')
logger.info(f'Tesseract executor')

@app.post('/health_check', status_code = status.HTTP_200_OK)
async def hl():
    logger.info('health_check request')
    return {"message": "health check"}

with CurrentEnv():
    logger.info(f'CurrentEnv')
    service = {{ service_class }}( {% for k, v in service_kwargs.items() %} {{ k }}={{ v }}, {% endfor %} )
    logger.info(f'service {service}')

    @app.post('/{{ function_name }}')
    async def {{ function_name }}(file: UploadFile = File(...)):
        logger.info(f'recived file {file.filename}')
        content = await file.read()
        result = await service.{{ function_name }}(content)
        return result
